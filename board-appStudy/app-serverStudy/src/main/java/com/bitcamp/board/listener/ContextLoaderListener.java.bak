package com.bitcamp.board.listener;

import java.util.EnumSet;
import javax.servlet.DispatcherType;
import javax.servlet.FilterRegistration;
import javax.servlet.ServletContextEvent;
import javax.servlet.ServletContextListener;
import javax.servlet.annotation.MultipartConfig;
import javax.servlet.annotation.WebListener;
import org.springframework.web.filter.CharacterEncodingFilter;
import com.bitcamp.board.filter.AdminCheckFilter;
import com.bitcamp.board.filter.LoginCheckFilter;

// 웹애플리케이션이 시작되었을 때 공유할 자원을 준비시키거나 해제하는 일을 한다.
//
@MultipartConfig(maxFileSize = 1024 * 1024 * 10) 
@WebListener
public class ContextLoaderListener implements ServletContextListener {
  @Override
  public void contextInitialized(ServletContextEvent sce) {
    System.out.println("ContextLoaderListener.contextInitialized()!!");
    try {
      // 필터 등록
      CharacterEncodingFilter filter = new CharacterEncodingFilter("UTF-8");
      FilterRegistration.Dynamic filterConfig = ctx.addFilter("CharacterEncodingFilter", filter);
      filterConfig.addMappingForServletNames(
          EnumSet.of(DispatcherType.REQUEST, DispatcherType.FORWARD, DispatcherType.INCLUDE), 
          false, 
          "app");

      AdminCheckFilter adminFilter = new AdminCheckFilter();
      FilterRegistration.Dynamic adminFilterConfig = ctx.addFilter("AdminCheckFilter", adminFilter);
      adminFilterConfig.addMappingForUrlPatterns(
          EnumSet.of(DispatcherType.REQUEST, DispatcherType.FORWARD, DispatcherType.INCLUDE), 
          false, 
          "/app/member/*");

      LoginCheckFilter loginFilter = new LoginCheckFilter();
      FilterRegistration.Dynamic loginFilterConfig = ctx.addFilter("LoginCheckFilter", loginFilter);
      loginFilterConfig.addMappingForUrlPatterns(
          EnumSet.of(DispatcherType.REQUEST, DispatcherType.FORWARD, DispatcherType.INCLUDE), 
          false, 
          "/app/*");

    } catch (Exception e) {
      e.printStackTrace();
    }
  }
}
