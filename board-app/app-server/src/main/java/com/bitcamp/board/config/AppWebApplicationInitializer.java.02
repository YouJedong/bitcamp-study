package com.bitcamp.board.config;

import java.util.EnumSet;
import javax.servlet.DispatcherType;
import javax.servlet.FilterRegistration;
import javax.servlet.MultipartConfigElement;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.ServletRegistration.Dynamic;
import javax.servlet.annotation.MultipartConfig;
import org.springframework.web.context.AbstractContextLoaderInitializer;
import org.springframework.web.context.WebApplicationContext;
import org.springframework.web.context.support.AnnotationConfigWebApplicationContext;
import org.springframework.web.filter.CharacterEncodingFilter;
import org.springframework.web.servlet.DispatcherServlet;
import com.bitcamp.board.filter.AdminCheckFilter;
import com.bitcamp.board.filter.LoginCheckFilter;

// 서블릿 컨테이너
// ===> SpingServletContainerInitializer.onStartup()호출
//      ===> AppWebApplicationInitializer.onStartup() 호출
//           ===> AbstractContextLoaderInitializer 구현체의 onStartup()호출
//                ===> WebApplicationInitializer 구현체의 onStartup()호출
//                ===> registerContextLoaderListener() 호출
@MultipartConfig(maxFileSize = 1024 * 1024 * 10) 
public class AppWebApplicationInitializer2 extends AbstractContextLoaderInitializer {

  @Override
  protected WebApplicationContext createRootApplicationContext() {
    // 당장 Root IoC 컨테이너를 생성하지 않을 것 이다.
    // 따라서 null을 리턴한다.
    // null을 리턴하면 ContextLoaderListener 객체도 생성되지 않을 것이다.
    // 당연히 해당 리스너가 서블릿 컨테이너에 등록되지 않는다.
    return null;
  }

  // 수퍼클래스의 onStart()을 재정의한다.
  // => super.onStartup(): ContextLoaderListener를 준비하는 일을 한다.
  // => + 프론트 컨트롤러와 프론트 컨트롤러에서 사용할 IoC 컨테이너를 등록한다.
  @Override
  public void onStartup(ServletContext servletContext) throws ServletException {
    // 수퍼클래스에서 ContextLoaderListener를 준비하는 작업은 그대로 수행하게 한다.
    super.onStartup(servletContext); // 수퍼 클래스의 메서드는 그대로 실행!

    // 프론트 컨트롤러 및 프론트 컨트롤러가 사용할 IoC 컨테이너 준비
    System.out.println("AppWebApplicationInitializer.onStartup()!!");

    // 웹관련 컴포넌트를 다룰 수 있는 기능이 포함된 스프링 IoC 컨테이너 준비
    AnnotationConfigWebApplicationContext iocContainer =
        new AnnotationConfigWebApplicationContext();
    iocContainer.register(AppConfig.class);

    // 웹 애플리케이션의 루트 경로를 ServletContext 보관소에 저장해 둔다.
    servletContext.setAttribute("contextPath", servletContext.getContextPath());

    // 자바 코드로 서블릿 객체를 직접 생성하여 서버에 등록하기
    DispatcherServlet servlet = new DispatcherServlet(iocContainer);
    Dynamic config = servletContext.addServlet("app", servlet);
    config.setLoadOnStartup(1); // 웹 애플리케이션을 시작할 때 프론트 컨트롤러를 자동 생성
    config.addMapping("/app/*");

    // 1) 멀티파트 설정 정보를 애노테이션에서 가져오기
    //    config.setMultipartConfig(new MultipartConfigElement(
    //        this.getClass().getAnnotation(MultipartConfig.class)));

    // 2) 멀티파트 
    config.setMultipartConfig(new MultipartConfigElement(
        System.getProperty("java.io.tmpdir"), // 클라이언트가 보낸 파일을 임시 저장할 디렉토리
        1024 * 1024 * 5, // 한 파일의 최대 크기
        1024 * 1024 * 10, // 첨부 파일을 포함한 전체 요청 데이터의 최대 크기
        1024 * 1024 // 첨부 파일 데이터를 일시적으로 보관할 버퍼 크기 
        ));

    // 필터 등록
    CharacterEncodingFilter filter = new CharacterEncodingFilter("UTF-8");
    FilterRegistration.Dynamic filterConfig = servletContext.addFilter("CharacterEncodingFilter", filter);// 내부 인터페이스가존재
    filterConfig.addMappingForServletNames(
        EnumSet.of(DispatcherType.REQUEST, DispatcherType.FORWARD, DispatcherType.INCLUDE), // 인크루드, 포워드해서 디스패쳐로 넘어올때 모두 필터를 적용한다. 
        false, 
        "app");

    AdminCheckFilter adminFilter = new AdminCheckFilter();
    FilterRegistration.Dynamic adminFilterConfig = servletContext.addFilter("AdminCheckFilter", adminFilter);// 내부 인터페이스가존재
    adminFilterConfig.addMappingForUrlPatterns(
        EnumSet.of(DispatcherType.REQUEST, DispatcherType.FORWARD, DispatcherType.INCLUDE), // 인크루드, 포워드해서 디스패쳐로 넘어올때 모두 필터를 적용한다. 
        false, 
        "/app/member/*");

    LoginCheckFilter loginFilter = new LoginCheckFilter();
    FilterRegistration.Dynamic loginFilterConfig = servletContext.addFilter("LoginCheckFilter", loginFilter);// 내부 인터페이스가존재
    loginFilterConfig.addMappingForUrlPatterns(
        EnumSet.of(DispatcherType.REQUEST, DispatcherType.FORWARD, DispatcherType.INCLUDE), // 인크루드, 포워드해서 디스패쳐로 넘어올때 모두 필터를 적용한다. 
        false, 
        "/app/*");
  }
}
